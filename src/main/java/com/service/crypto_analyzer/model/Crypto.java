package com.service.crypto_analyzer.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

import java.math.BigDecimal;

/**
 * Represents a cryptocurrency data entity, including its symbol, timestamp, and price.
 * This class is used for storing and accessing cryptocurrency data from a database.
 *
 * <p>Annotations:
 * <ul>
 *  <li>{@code @Entity}: Marks this class as a JPA entity.</li>
 *  <li>{@code @Id}: Specifies the primary key of the entity.</li>
 *  <li>{@code @GeneratedValue}: Configures the way the primary key is generated.</li>
 * </ul>
 */
@Entity
public class Crypto {

    /**
     * The unique identifier of the cryptocurrency entry.
     * It is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The symbol of the cryptocurrency (e.g., BTC for Bitcoin).
     */
    private String symbol;

    /**
     * The timestamp when the price was recorded.
     * Stored as a long value representing milliseconds since the Unix epoch.
     */
    private long timestamp;

    /**
     * The price of the cryptocurrency at the recorded timestamp.
     */
    private BigDecimal price;

    /**
     * Default constructor required by JPA.
     * Initializes a new instance of the Crypto class without any data.
     */
    public Crypto() {
    }

    /**
     * Constructs a new Crypto object with the given symbol, timestamp, and price.
     *
     * @param symbol the symbol of the cryptocurrency (e.g., BTC, ETH)
     * @param timestamp the timestamp in milliseconds when the price was recorded
     * @param price the price of the cryptocurrency at the given timestamp
     */
    public Crypto(String symbol, long timestamp, BigDecimal price) {
        this.symbol = symbol;
        this.timestamp = timestamp;
        this.price = price;
    }

    /**
     * Gets the unique identifier of this Crypto object.
     *
     * @return the id of the cryptocurrency
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier for this Crypto object.
     *
     * @param id the new id to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the symbol of this cryptocurrency.
     *
     * @return the symbol of the cryptocurrency
     */
    public String getSymbol() {
        return symbol;
    }

    /**
     * Sets the symbol for this cryptocurrency.
     *
     * @param symbol the new symbol to set (e.g., BTC, ETH)
     */
    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    /**
     * Gets the timestamp of when the price was recorded.
     *
     * @return the timestamp in milliseconds since Unix epoch
     */
    public long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the timestamp for when the price was recorded.
     *
     * @param timestamp the new timestamp in milliseconds since Unix epoch
     */
    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    /**
     * Gets the price of the cryptocurrency at the recorded timestamp.
     *
     * @return the price of the cryptocurrency
     */
    public BigDecimal getPrice() {
        return price;
    }

    /**
     * Sets the price of the cryptocurrency.
     *
     * @param price the new price to set
     */
    public void setPrice(BigDecimal price) {
        this.price = price;
    }
}